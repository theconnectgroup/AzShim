#!/bin/bash
# Author: Justin Kikani 
# Initial Release: 5/18/2022
# Last Modified: 11/19/2024
# Version: 3.0.0
# Release Notes: Modularizing the script, adding in functions for configuration and removal. 
# Making the creation process smoother and faster overall. Reducing the amount of loops.
# Eventhubs namespace and other related commands will come out of preview in nov release, 
# was set to preview status by MS on Aug 9 in error.
# Purpose: To simplify the creation of the event hubs integration for blumira within Azure, 
# this is meant to turn on the diagnostic settings for Azure resources located within the 
# same resource group as the created namespace name, due to the way licensing works within Azure
# this script does not encompass metrics enablement or the ability to turn on Azure Active Directory
# or Defender integrations, this is in the same vein as poshim for automated windows logging
# 11/19/2024:
# This script has an added option for a simple setup -c option w/o any inputs
# This configures one RG, one namespace, one eventhub, configures subscription level logging and
# outputs the credentials for configuration, this is tied to a single region and is ideal for setups
# where there are only Entra, Defender, Intune, etc. It also removes the -u and -s now becomes -c

# Standardized Blumira Resource Group name
myResourceGroup="Blumira-RG"
# Statically set to reduce friction but this value can be changed to suit your preferences or needs
myEventHubName="DMC-Blumira-EventHub"
# Statically set NameSpaceName
myEventHubNameSpace="DMC-Blumira-EventHUBNS"
# Get current subscription Ids
tempSubList=$(az account show --query "[id]" -o tsv | awk -F '\t' '{print $1}' | sort -u)
mySubscriptionIds=($(echo $tempSubList | tr " " "\n"))

function Help() {
    echo "AzShim is an automated deployment tool for configuring an Azure Eventhub for Blumira."
    echo "WARNING! THIS SCRIPT USES THE DATE/TIME FOR NAMESPACING RESOURCES"
    echo "Valid syntax will include AzShim.sh -h|-c"
    echo "For support please contact support@blumira.com"
}

# This function is just to set up one event hub in one location and configure it for az subscription level logs 
# and output the event hub string and creds for configuration in Blumira
function SimpleSetup() {
    IFS=$'\n' subNameList=($(az account show --query "[name]" -o tsv))
    echo 'Please select a subscription by choosing the number that corresponds to your selection:'
    select subscription in "${subNameList[@]}"; do
        if [ -z "$subscription" ]; then
            echo "Invalid option $REPLY, please select a valid option"
            continue
        fi

        case $subscription in
        *[[:alnum:]]*)
            az account set --name "${subscription}" > /dev/null
            echo "Getting list of location codes in use within subscription. Please select a number from the list:"
            location="westus"
            startDateTime=$(date)
            myEpoch=$(date -d "${startDateTime}" +"%s")

            az provider register --namespace 'microsoft.insights' > /dev/null
            echo "Creating resource group."
            az group create --location "${location}" --name "${myResourceGroup}" -o table

            echo "Creating Namespace..."
            az eventhubs namespace create \
                --name "${myEventHubNameSpace}-${location}" \
                --resource-group "${myResourceGroup}" \
                --location "${location}" \
                --sku Basic \
                --capacity 1 \
                --enable-auto-inflate false > /dev/null 2>&1

            echo "Waiting 30s for Namespace creation..."
            sleep 30s

            echo "Creating Event Hub and Authorization Rule under the event hub..."
            az eventhubs eventhub create \
                --name "${myEventHubName}-${location}" \
                --namespace-name "${myEventHubNameSpace}-${location}" \
                --resource-group "${myResourceGroup}" \
                --partition-count 2 \
                --cleanup-policy Delete \
                --retention-time-in-hours 1 \
                --output none > /dev/null 2>&1

            echo "Waiting 30s for Event Hub Creation"
            sleep 30s

            az eventhubs eventhub authorization-rule create \
                --name "LogsToBlumira-${myEpoch}" \
                --eventhub-name "${myEventHubName}-${location}" \
                --namespace-name "${myEventHubNameSpace}-${location}" \
                --resource-group "${myResourceGroup}" \
                --rights Listen \
                --output none > /dev/null 2>&1

            echo '******************************************************************'
            echo 'You will need the Primary Connection String and the Event Hub name to copy and paste in the sensor module within Blumira.'
            echo 'Primary Connection String:'
            az eventhubs eventhub authorization-rule keys list \
                --resource-group "${myResourceGroup}" \
                --eventhub-name "${myEventHubName}-${location}" \
                --namespace-name "${myEventHubNameSpace}-${location}" \
                --name "LogsToBlumira" --query "primaryConnectionString" -o tsv

            echo 'Event Hub Name:'
            echo "${myEventHubName}-${location}-${myEpoch}"
            echo '******************************************************************'

            mySubRuleID=$(az eventhubs namespace authorization-rule show \
                --name "RootManageSharedAccessKey" \
                --resource-group "${myResourceGroup}" \
                --namespace-name "${myEventHubNameSpace}-${location}" \
                --query "id" -o tsv)

            az monitor diagnostic-settings subscription create \
                --name "BlumiraDiagSetting" \
                --location "${location}" \
                --event-hub-name "${myEventHubName}-${location}" \
                --event-hub-auth-rule "${mySubRuleID}" \
                --logs '[{"category": "Security","enabled": true},{"category": "Administrative","enabled": true},{"category": "ServiceHealth","enabled": true},{"category": "Alert","enabled": true},{"category": "Recommendation","enabled": true},{"category": "Policy","enabled": true},{"category": "Autoscale","enabled": true},{"category": "ResourceHealth","enabled": true}]' \
                --output none > /dev/null
            ;;
        esac
        break
    done
}

# Main function
while getopts ":hct" option; do
    case $option in
    h) # Display Help
        Help
        ;;
    c) # simple setup
        startDateTime=$(date)
        myEpoch=$(date -d "${startDateTime}" +"%s")
        echo "This script is intended for only NA regions only."
        echo "This script will NOT work for GCC environments."
        echo -e "\n"
        echo "******************************************************************************"
        SimpleSetup
        endDateTime=$(date)
        echo "Start time: ${startDateTime}"
        echo "End time:: ${endDateTime}"
        echo -e "\n"
        exit;;
    t) # Testing
        ;;
    /?)
        echo "Invalid option please try again."
        ;;
    esac
done
